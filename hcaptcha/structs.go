package hcaptcha

import "net/http"

type HCaptcha struct {
	Host       string
	SiteKey    string
	HTTPClient *http.Client
	Verbose    bool
}

type RecordedEvent []int64

type MotionData_Navigator_UserAgentData_Brand struct {
	Brand   string `json:"brand"`
	Version string `json:"version"`
}

type MotionData_Navigator_UserAgentData struct {
	Brands   []MotionData_Navigator_UserAgentData_Brand `json:"brands"`
	Mobile   bool                                       `json:"mobile"`
	Platform string                                     `json:"platform"`
}

type MotionData_Navigator struct {
	VendorSub               string                             `json:"vendorSub"`
	ProductSub              string                             `json:"productSub"`
	Vendor                  string                             `json:"vendor"`
	MaxTouchPoints          int                                `json:"maxTouchPoints"`
	Scheduling              struct{}                           `json:"scheduling"`
	UserActivation          struct{}                           `json:"userActivation"`
	DoNotTrack              interface{}                        `json:"doNotTrack"`
	Geolocation             struct{}                           `json:"geolocation"`
	Connection              struct{}                           `json:"connection"`
	PdfViewerEnabled        bool                               `json:"pdfViewerEnabled"`
	WebkitTemporaryStorage  struct{}                           `json:"webkitTemporaryStorage"`
	WebkitPersistentStorage struct{}                           `json:"webkitPersistentStorage"`
	HardwareConcurrency     int                                `json:"hardwareConcurrency"`
	CookieEnabled           bool                               `json:"cookieEnabled"`
	AppCodeName             string                             `json:"appCodeName"`
	AppName                 string                             `json:"appName"`
	AppVersion              string                             `json:"appVersion"`
	Platform                string                             `json:"platform"`
	Product                 string                             `json:"product"`
	UserAgent               string                             `json:"userAgent"`
	Language                string                             `json:"language"`
	Languages               []string                           `json:"languages"`
	OnLine                  bool                               `json:"onLine"`
	Webdriver               bool                               `json:"webdriver"`
	Bluetooth               struct{}                           `json:"bluetooth"`
	Clipboard               struct{}                           `json:"clipboard"`
	Credentials             struct{}                           `json:"credentials"`
	Keyboard                struct{}                           `json:"keyboard"`
	Managed                 struct{}                           `json:"managed"`
	MediaDevices            struct{}                           `json:"mediaDevices"`
	Storage                 struct{}                           `json:"storage"`
	ServiceWorker           struct{}                           `json:"serviceWorker"`
	WakeLock                struct{}                           `json:"wakeLock"`
	DeviceMemory            int                                `json:"deviceMemory"`
	Ink                     struct{}                           `json:"ink"`
	Hid                     struct{}                           `json:"hid"`
	Locks                   struct{}                           `json:"locks"`
	MediaCapabilities       struct{}                           `json:"mediaCapabilities"`
	MediaSession            struct{}                           `json:"mediaSession"`
	Permissions             struct{}                           `json:"permissions"`
	Presentation            struct{}                           `json:"presentation"`
	Serial                  struct{}                           `json:"serial"`
	VirtualKeyboard         struct{}                           `json:"virtualKeyboard"`
	Usb                     struct{}                           `json:"usb"`
	Xr                      struct{}                           `json:"xr"`
	UserAgentData           MotionData_Navigator_UserAgentData `json:"userAgentData"`
	Plugins                 []string                           `json:"plugins"`
}

type MotionData_Screen struct {
	AvailWidth  int         `json:"availWidth"`
	AvailHeight int         `json:"availHeight"`
	Width       int         `json:"width"`
	Height      int         `json:"height"`
	ColorDepth  int         `json:"colorDepth"`
	PixelDepth  int         `json:"pixelDepth"`
	AvailTop    int         `json:"availTop"`
	AvailLeft   int         `json:"availLeft"`
	Onchange    interface{} `json:"onchange"`
	IsExtended  bool        `json:"isExtended"`
}

type MotionData_TopLevel struct {
	Start               int64                `json:"st"`
	Screen              MotionData_Screen    `json:"sc"`
	Navigator           MotionData_Navigator `json:"nv"`
	DocumentReferrer    string               `json:"dr"`
	Invisible           bool                 `json:"inv"`
	ExecutedByJS        bool                 `json:"exec"`
	Wn                  []RecordedEvent      `json:"wn"`
	WnMeanPeriod        float64              `json:"wn-mp"`
	ScrollXY            []RecordedEvent      `json:"xy"`
	ScrollXYMeanPeriod  float64              `json:"xy-mp"`
	MouseMove           []RecordedEvent      `json:"mm"`
	MouseMoveMeanPeriod float64              `json:"mm-mp"`
}

type MotionData_Prev struct {
	Escaped          bool `json:"escaped"`
	Passed           bool `json:"passed"`
	ExpiredChallenge bool `json:"expiredChallenge"`
	ExpiredResponse  bool `json:"expiredResponse"`
}

type MotionData struct {
	Start               int64               `json:"st"`
	DCT                 int64               `json:"dct,omitempty"`
	MouseMove           []RecordedEvent     `json:"mm"`
	MouseMoveMeanPeriod float64             `json:"mm-mp"`
	MouseDown           []RecordedEvent     `json:"md"`
	MouseDownMeanPeriod float64             `json:"md-mp"`
	MouseUp             []RecordedEvent     `json:"mu"`
	MouseUpMeanPeriod   float64             `json:"mu-mp"`
	V                   int                 `json:"v"`
	TopLevel            MotionData_TopLevel `json:"topLevel"`
	Session             []string            `json:"session"`
	WidgetList          []string            `json:"widgetList,omitempty"`
	WidgetID            string              `json:"widgetId,omitempty"`
	Href                string              `json:"href,omitempty"`
	Prev                *MotionData_Prev    `json:"prev,omitempty"`
}

type CheckSiteConfigResponse struct {
	Features struct {
	} `json:"features"`
	C struct {
		Type string `json:"type"`
		Req  string `json:"req"`
	} `json:"c"`
	Pass bool `json:"pass"`
}

type GetCaptchaResponse struct {
	C struct {
		Type string `json:"type"`
		Req  string `json:"req"`
	} `json:"c"`
	ChallengeURI  string `json:"challenge_uri"`
	Key           string `json:"key"`
	RequestConfig struct {
		Version                      int         `json:"version"`
		ShapeType                    interface{} `json:"shape_type"`
		MinPoints                    interface{} `json:"min_points"`
		MaxPoints                    interface{} `json:"max_points"`
		MinShapesPerImage            interface{} `json:"min_shapes_per_image"`
		MaxShapesPerImage            interface{} `json:"max_shapes_per_image"`
		RestrictToCoords             interface{} `json:"restrict_to_coords"`
		MinimumSelectionAreaPerShape interface{} `json:"minimum_selection_area_per_shape"`
		MultipleChoiceMaxChoices     int         `json:"multiple_choice_max_choices"`
		MultipleChoiceMinChoices     int         `json:"multiple_choice_min_choices"`
		OverlapThreshold             interface{} `json:"overlap_threshold"`
	} `json:"request_config"`
	RequestType       string `json:"request_type"`
	RequesterQuestion struct {
		En string `json:"en"`
	} `json:"requester_question"`
	RequesterQuestionExample []string `json:"requester_question_example"`
	Tasklist                 []struct {
		DatapointURI string `json:"datapoint_uri"`
		TaskKey      string `json:"task_key"`
	} `json:"tasklist"`
	BypassMessage     string `json:"bypass-message"`
	GeneratedPassUUID string `json:"generated_pass_UUID"`
}

type CheckCaptchaRequest struct {
	V            string            `json:"v"`
	JobMode      string            `json:"job_mode"`
	Answers      map[string]string `json:"answers"`
	Serverdomain string            `json:"serverdomain"`
	Sitekey      string            `json:"sitekey"`
	MotionData   string            `json:"motionData"`
	N            string            `json:"n"`
	C            string            `json:"c"`
}

type CheckCaptchaResponse struct {
	C struct {
		Type string `json:"type"`
		Req  string `json:"req"`
	} `json:"c"`
	Pass              bool   `json:"pass"`
	GeneratedPassUUID string `json:"generated_pass_UUID"`
	Expiration        int    `json:"expiration"`
}
