package hcaptcha

import (
	"fmt"
	"math/rand"
	"net/http"
	"net/http/httputil"
	"strings"
	"time"
)

func DebugRequest(req *http.Request) {
	buf, err := httputil.DumpRequestOut(req, true)
	if err != nil {
		fmt.Println(err)
	}

	fmt.Println(string(buf))
}

func HandleError(err error) {
	if err != nil {
		return
	}
}

func URLEncode(sitekey string) string {
	var b strings.Builder
	b.Grow(len(sitekey) * 3)

	for _, c := range sitekey {
		if rand.Intn(3) == 1 {
			b.WriteString(fmt.Sprintf("%%%02x", c))
		} else {
			b.WriteRune(c)
		}
	}

	return b.String()
}

func RandMinMax(min, max int64) int64 {
	return rand.Int63n(max-min) + min
}

func RandomEpochTime() int64 {
	offset := time.Duration(RandMinMax(1000, 12000)) * time.Millisecond
	return time.Now().Add(offset).Unix()
}

func MouseMovement() (reply []RecordedEvent) {
	for i := 0; i < int(RandMinMax(15, 60)); i++ {
		reply = append(reply, RecordedEvent{RandMinMax(15, 450), int64(int64(i) + RandMinMax(15, 450)), RandomEpochTime()})
	}

	return
}

func GenerateMotionData() (m *MotionData) {
	start := RandomEpochTime()
	startoffset := start + RandMinMax(100, 500)

	m = &MotionData{}
	m.Start = startoffset

	m.MouseMove = MouseMovement()
	m.MouseMoveMeanPeriod = 8.809523809523812
	m.MouseDown = []RecordedEvent{{140, 55, 1656870360884}}
	m.MouseDownMeanPeriod = 0
	m.MouseUp = []RecordedEvent{{140, 55, 1656870360937}}
	m.MouseUpMeanPeriod = 0

	m.V = 1

	m.TopLevel.Start = start

	m.TopLevel.Screen.Width = 1920
	m.TopLevel.Screen.Height = 1080
	m.TopLevel.Screen.AvailWidth = 1920
	m.TopLevel.Screen.AvailHeight = 1040
	m.TopLevel.Screen.ColorDepth = 24
	m.TopLevel.Screen.PixelDepth = 24
	m.TopLevel.Screen.AvailTop = 0
	m.TopLevel.Screen.AvailLeft = 0
	m.TopLevel.Screen.Onchange = nil
	m.TopLevel.Screen.IsExtended = false

	m.TopLevel.Navigator.Vendor = "Google Inc."
	m.TopLevel.Navigator.VendorSub = ""
	m.TopLevel.Navigator.ProductSub = "20030107"
	m.TopLevel.Navigator.MaxTouchPoints = 0
	m.TopLevel.Navigator.DoNotTrack = nil
	m.TopLevel.Navigator.PdfViewerEnabled = true
	m.TopLevel.Navigator.HardwareConcurrency = 6
	m.TopLevel.Navigator.CookieEnabled = true
	m.TopLevel.Navigator.AppCodeName = "Mozilla"
	m.TopLevel.Navigator.AppName = "Netscape"
	m.TopLevel.Navigator.AppVersion = "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36"
	m.TopLevel.Navigator.Platform = "Win32"
	m.TopLevel.Navigator.Product = "Gecko"
	m.TopLevel.Navigator.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.114 Safari/537.36"
	m.TopLevel.Navigator.Language = "en-US"
	m.TopLevel.Navigator.Languages = []string{"en-US", "en"}
	m.TopLevel.Navigator.OnLine = true
	m.TopLevel.Navigator.Webdriver = false
	m.TopLevel.Navigator.DeviceMemory = 8

	m.TopLevel.Navigator.UserAgentData.Brands = []MotionData_Navigator_UserAgentData_Brand{
		{
			Brand:   ".Not/A)Brand",
			Version: "99",
		},
		{
			Brand:   "Google Chrome",
			Version: "103",
		},
		{
			Brand:   "Chromium",
			Version: "103",
		},
	}
	m.TopLevel.Navigator.UserAgentData.Mobile = false
	m.TopLevel.Navigator.UserAgentData.Platform = "Windows"

	m.TopLevel.Navigator.Plugins = []string{
		"internal-pdf-viewer",
		"mhjfbmdgcfjbbpaeojofohoefgiehjai",
	}

	m.TopLevel.DocumentReferrer = ""
	m.TopLevel.Invisible = false
	m.TopLevel.ExecutedByJS = false

	m.TopLevel.Wn = []RecordedEvent{{1869, 572, 1, 1656475582528}}
	m.TopLevel.WnMeanPeriod = 0
	m.TopLevel.ScrollXY = []RecordedEvent{{0, 0, 1, 1656475582528}, {0, 183, 1, 1656475583740}}
	m.TopLevel.ScrollXYMeanPeriod = 1212
	m.TopLevel.MouseMove = []RecordedEvent{{1089, 457, 1656475582578}, {1070, 467, 1656475582682}, {1020, 653, 1656475583748}}
	m.TopLevel.MouseMoveMeanPeriod = 292.5

	m.WidgetList = []string{
		"01910ficj02w",
	}
	m.WidgetID = "01910ficj02w"
	m.Href = "https://discord.com/register"

	m.Session = []string{}
	m.Prev = &MotionData_Prev{}
	m.Prev.Escaped = false
	m.Prev.Passed = false
	m.Prev.ExpiredChallenge = false
	m.Prev.ExpiredResponse = false

	return
}

func FixCheckMD(m *MotionData) {
	m.DCT = m.Start
	m.Session = nil
	m.WidgetList = []string{}
	m.WidgetID = ""
	m.Href = ""
	m.Prev = nil
}
