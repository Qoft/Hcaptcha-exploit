import json
import math
import random
import base64
import urllib
import hashlib

import httpx
import requests
from datetime import datetime
from urllib.parse import urlencode
from undetected_chromedriver import Chrome, ChromeOptions


def encode_all(string):
    return "".join("%{0:0>2}".format(format(ord(char), "x")) for char in string)


class HCaptcha:
    def __init__(self, host: str, sitekey: str) -> None:
        self._host = host
        self._sitekey = sitekey
        self.chrome_opts = ChromeOptions()
        self.chrome_opts.headless = True
        self.driver = Chrome(options=self.chrome_opts)
        self.hsw_code = httpx.get("https://newassets.hcaptcha.com/c/e1efca35/hsw.js").text
        self.headers = {
            "Authority": "hcaptcha.com",
            "Accept": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                          "(KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36",
            "Content-Type": "application/x-www-form-urlencoded",
            "Origin": "https://assets.hcaptcha.com",
            "Sec-Fetch-Site": "same-site",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Dest": "empty",
            "Accept-Language": "en-US,en;q=0.9"
        }
        self._config = self._site_config()

    def _mouse_movement(self) -> list:
        movement = []

        for x in range(random.randint(10, 25)):
            x_movement = random.randint(15, 450)
            y_movement = random.randint(15, 450)
            rounded_time = round(datetime.now().timestamp())
            movement.append([x_movement, y_movement, rounded_time])

        return movement

    def _get_hsw(self, req) -> str:
        return self.driver.execute_script(f"{self.hsw_code}; return hsw('{req}')")

    def _site_config(self) -> dict | None:
        try:
            config = requests.get(
                "https://staging.hmt.ai/checksiteconfig?host=%s&sitekey=%s&sc=1&swa=1" %
                (self._host,
                 "".join("%{0:0>2}".format(format(ord(char), "x")) for char in self._sitekey)),
                headers=self.headers,
                timeout=3).json()
            if config["pass"]:
                return config["c"]
        except Exception:
            return None

    def _get_captcha(self) -> str:
        try:
            payload = urlencode({
                "host": self._host,
                "sitekey": self._sitekey,
                "hl": "en",
                "motionData": {
                    "mm": self._mouse_movement(),
                    "st": round(datetime.now().timestamp()),
                    "prev": {
                        "expiredResponse": False
                    }
                },
                "n": self._get_hsw(self._config['req']),
                "c": json.dumps(self._config)
            })
            self.headers["Content-Length"] = str(len(payload))

            getcaptcha = requests.post(
                "https://staging.hmt.ai/getcaptcha?s=%s" % encode_all(self._sitekey),
                data=payload,
                headers=self.headers,
                timeout=3
            )

            if "generated_pass_UUID" in getcaptcha.text:
                return getcaptcha.json()["generated_pass_UUID"]
            getcap_json = getcaptcha.json()
            accepted = dict()
            for task in getcap_json['tasklist']:
                accepted.update({
                    task['task_key']: "true" if getcap_json['requester_question']['en'].replace(
                        "Please click each image containing a ", ""
                    ) in task['datapoint_uri'] else "false"
                })
            self._config = getcap_json['c']
            payload = {
                "answers": accepted,
                "serverdomain": self._host,
                "sitekey": self._sitekey,
                "job_mode": "image_label_binary",
                "motionData": json.dumps({
                    "mm": self._mouse_movement(),
                    "st": round(datetime.now().timestamp()),
                    "prev": {
                        "expiredResponse": False
                    }
                }),
                "n": self._get_hsw(self._config['req']),
                "c": json.dumps(self._config)
            }
            checkcaptcha = requests.post(f"https://staging.hmt.ai/checkcaptcha/{encode_all(self._sitekey)}"
                                         f"/{getcap_json['key']}",
                                         json=payload,
                                         headers={
                                             "Authority": "hcaptcha.com",
                                             "Accept": "application/json",
                                             "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                                                           "AppleWebKit/537.36 (KHTML, like Gecko) "
                                                           "Chrome/85.0.4183.102 Safari/537.36",
                                             "content-type": "application/json;charset=UTF-8",
                                             "Origin": "https://assets.hcaptcha.com",
                                             "Sec-Fetch-Site": "same-site",
                                             "Sec-Fetch-Mode": "cors",
                                             "Sec-Fetch-Dest": "empty",
                                             "Accept-Language": "en-US,en;q=0.9"
                                         }).json()
            return checkcaptcha['generated_pass_UUID']
        except Exception:
            pass

    def solve(self):
        return self._get_captcha()


